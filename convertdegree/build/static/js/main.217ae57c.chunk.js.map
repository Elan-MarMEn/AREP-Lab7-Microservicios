{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","farenheit","celsius","handleRequest","bind","handleStateConvert","event","value","target","this","setState","fetch","then","response","json","data","Celcius","type","placeholder","onChange","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PA4CeA,E,kDAxCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,GACXC,QAAS,IAEX,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAPT,E,sDAUnB,SAAmBE,GACjB,IAAMC,EAAQD,EAAME,OAAOD,MAC3BE,KAAKC,SAAS,CAACT,UAAWM,M,2BAG5B,WAAiB,IAAD,OACdI,MAAM,+FAA+FF,KAAKT,MAAMC,WAC3GW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKL,SAAS,CAACR,QAASa,EAAKC,e,oBAKvC,WACE,OACE,gCACI,uBACA,uBAAOC,KAAK,SAASC,YAAY,WAAWC,SAAUV,KAAKJ,qBAC3D,wBAAQe,QAASX,KAAKN,cAAtB,qBAEA,+BACE,6BAAI,gDAAmBM,KAAKT,MAAMC,eAClC,6BAAI,8CAAiBQ,KAAKT,MAAME,uB,GAlC1BmB,aCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.217ae57c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      farenheit: '',\n      celsius: ''\n    };\n    this.handleRequest = this.handleRequest.bind(this);\n    this.handleStateConvert = this.handleStateConvert.bind(this);\n  }\n\n  handleStateConvert(event) {\n    const value = event.target.value;\n    this.setState({farenheit: value});\n  }\n\n  handleRequest() {\n    fetch('https://u5ptjv8bp7.execute-api.us-east-1.amazonaws.com/ConvertDegree/covertFarenheit?degree='+this.state.farenheit)\n        .then(response => response.json())\n        .then(data => {\n            this.setState({celsius: data.Celcius});\n        });\n  }\n\n\n  render() {\n    return (\n      <div>\n          <br/>\n          <input type=\"number\" placeholder=\"Degree's\" onChange={this.handleStateConvert}/>\n          <button onClick={this.handleRequest}>Convert</button>\n\n          <ul>\n            <li><label>Farenheit: {this.state.farenheit}</label></li>\n            <li><label>Celsius: {this.state.celsius}</label></li>\n          </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}